/*
 * Copyright (C) 2019 Clément Gérardin @ Marseille.fr
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package gcodeeditor.gui;

import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JScrollBar;
import javax.swing.SwingUtilities;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.text.BadLocationException;
import javax.swing.text.Document;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleConstants;
import gcodeeditor.GRBLControler;

/**
 * A frame to show GRBL messages and send commands.
 * @author Clément
 */
public class JLogFrame extends javax.swing.JFrame {

    /**
     * Creates new form JLogFrame
     */
    SimpleAttributeSet attr;
    int nbLines = 0;
    private boolean showStatus;
    private final GRBLControler grbl;
    
    private static File lastLogFileDir;
    
    public JLogFrame( GRBLControler grbl) {
        this.grbl = grbl;
        initComponents();
        attr = new SimpleAttributeSet();
        //StyleConstants.setForeground(attrs, Color.red);
        //StyleConstants.setItalic(attrs, true);
        //StyleConstants.setBold(attrs, true);    
    }
    
    @SuppressWarnings("CallToPrintStackTrace")
    public void addLog( String text, boolean bold) {
        Document doc = jTextPaneCmd.getDocument();
        StyleConstants.setBold(attr, bold);
        try {
            if ( text.startsWith("<") && ! bold && ! showStatus) return;
            
            doc.insertString(doc.getLength(), text + (text.endsWith("\n")?"":"\n"), attr);
            nbLines++;
            
            final JScrollBar sb = jScrollPane3.getVerticalScrollBar();
            SwingUtilities.invokeLater( ()->{ sb.setValue( sb.getMaximum()); });
            
        } catch (BadLocationException ex) { ex.printStackTrace(); }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextPaneCmd = new javax.swing.JTextPane();
        jPanel2 = new javax.swing.JPanel();
        jButtonClose = new javax.swing.JButton();
        jButtonClear = new javax.swing.JButton();
        jCheckBox1 = new javax.swing.JCheckBox();
        jTextFieldSaveFile = new javax.swing.JTextField();
        jCheckBoxSave = new javax.swing.JCheckBox();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jTextFieldCmd = new javax.swing.JTextField();

        setTitle("GRBL Communication windows");
        setAlwaysOnTop(true);
        setAutoRequestFocus(false);

        jPanel1.setMinimumSize(new java.awt.Dimension(50, 50));
        jPanel1.setLayout(new javax.swing.BoxLayout(jPanel1, javax.swing.BoxLayout.LINE_AXIS));

        jTextPaneCmd.setEditable(false);
        jTextPaneCmd.setPreferredSize(new java.awt.Dimension(350, 100));
        jScrollPane3.setViewportView(jTextPaneCmd);

        jPanel1.add(jScrollPane3);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        jPanel2.setLayout(new java.awt.GridBagLayout());

        jButtonClose.setText("Close");
        jButtonClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCloseActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(4, 0, 5, 5);
        jPanel2.add(jButtonClose, gridBagConstraints);

        jButtonClear.setText("Clear");
        jButtonClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonClearActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 10);
        jPanel2.add(jButtonClear, gridBagConstraints);

        jCheckBox1.setText("Show status report          ");
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel2.add(jCheckBox1, gridBagConstraints);

        jTextFieldSaveFile.setToolTipText("write raw GRBL commands to file");
        jTextFieldSaveFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldSaveFileActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel2.add(jTextFieldSaveFile, gridBagConstraints);

        jCheckBoxSave.setText("Save");
        jCheckBoxSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxSaveActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        jPanel2.add(jCheckBoxSave, gridBagConstraints);

        getContentPane().add(jPanel2, java.awt.BorderLayout.SOUTH);

        jPanel3.setLayout(new java.awt.BorderLayout());

        jPanel4.setLayout(new java.awt.BorderLayout());
        jPanel3.add(jPanel4, java.awt.BorderLayout.LINE_END);

        jLabel1.setText("Send ");
        jPanel3.add(jLabel1, java.awt.BorderLayout.LINE_START);

        jTextFieldCmd.setColumns(20);
        jTextFieldCmd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldCmdActionPerformed(evt);
            }
        });
        jPanel3.add(jTextFieldCmd, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel3, java.awt.BorderLayout.NORTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCloseActionPerformed
        setVisible(false);
    }//GEN-LAST:event_jButtonCloseActionPerformed

    private void jButtonClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonClearActionPerformed
        try {
            jTextPaneCmd.getDocument().remove(0, jTextPaneCmd.getDocument().getLength());
        } catch (BadLocationException ex) {
            Logger.getLogger(JLogFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButtonClearActionPerformed

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        showStatus = jCheckBox1.isSelected();
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    private void jTextFieldCmdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldCmdActionPerformed
        if ( grbl.isConnected()) grbl.pushCmd( jTextFieldCmd.getText());
    }//GEN-LAST:event_jTextFieldCmdActionPerformed
    
    private void jCheckBoxSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxSaveActionPerformed
        if ( jCheckBoxSave.isSelected()) {
            if ( jTextFieldSaveFile.getText().isBlank()) {
                JFileChooser f = new JFileChooser();
                f.setFileFilter(new FileNameExtensionFilter("GCode or log file (*.txt,*.log,*.gcode)", "log", "txt", "gcode"));
                if ( lastLogFileDir != null) f.setCurrentDirectory(lastLogFileDir);
        
                int rVal = f.showSaveDialog(this);
                if ( rVal == JFileChooser.APPROVE_OPTION) {
                    lastLogFileDir = f.getSelectedFile().getParentFile();
                    
                    String fname = f.getSelectedFile().getAbsolutePath();
                    if ( fname.indexOf('.') == -1) 
                        fname = fname.concat(".gcode");
                    if (new File( fname).exists())
                        if ( JOptionPane.showConfirmDialog(this, fname + "\nFile exits, overwrite it ?", "File Exist", JOptionPane.WARNING_MESSAGE)== JOptionPane.CANCEL_OPTION)
                                return;

                    jTextFieldSaveFile.setText(fname);             
                }
            }
            try {
                grbl.startFileLogger(jTextFieldSaveFile.getText());                        
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, "Error:\n"+ex.getLocalizedMessage(), "Saving...", JOptionPane.ERROR_MESSAGE);
                jCheckBoxSave.setSelected(false);
            }  
        }
        else grbl.stopFileLogger();
    }//GEN-LAST:event_jCheckBoxSaveActionPerformed

    private void jTextFieldSaveFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldSaveFileActionPerformed
        if ( jCheckBoxSave.isSelected()) {
            // change or trunk outputFile
            grbl.stopFileLogger();
            jCheckBoxSaveActionPerformed(null);
        }
    }//GEN-LAST:event_jTextFieldSaveFileActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JLogFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new JLogFrame(null).setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonClear;
    private javax.swing.JButton jButtonClose;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBoxSave;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextField jTextFieldCmd;
    private javax.swing.JTextField jTextFieldSaveFile;
    private javax.swing.JTextPane jTextPaneCmd;
    // End of variables declaration//GEN-END:variables
}
